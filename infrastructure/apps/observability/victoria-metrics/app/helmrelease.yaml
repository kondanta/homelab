---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/source.toolkit.fluxcd.io/ocirepository_v1.json
apiVersion: source.toolkit.fluxcd.io/v1
kind: OCIRepository
metadata:
  name: vm # VictoriaMetricsK8sStack
spec:
  interval: 5m
  layerSelector:
    mediaType: application/vnd.cncf.helm.chart.content.v1.tar+gzip
    operation: copy
  ref:
    tag: 0.61.5
  url: oci://ghcr.io/victoriametrics/helm-charts/victoria-metrics-k8s-stack
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: vm #VictoriaMetrics
spec:
  interval: 15m
  chartRef:
    kind: OCIRepository
    name: vm
  values:
    vmalert:
      enabled: false
    vmalertmanager:
      enabled: false
      
    fullnameOverride: stack
    victoria-metrics-operator:
      enabled: true
      createCRD: true
      operator:
        disable_prometheus_converter: false
        enable_converter_ownership: true
        
      env:
        - name: VM_VMALERTDEFAULT_CONFIGRELOADERCPU
          value: 0
        - name: VM_VMAGENTDEFAULT_CONFIGRELOADERCPU
          value: 0
        - name: VM_VMALERTMANAGER_CONFIGRELOADERCPU
          value: 0

    defaultDashboards:
      enabled: true
      grafanaOperator:
        enabled: false
      labels:
        key: value
      annotations:
        key: value


    defaultRules:
      create: true
          
    vmsingle:
      extraArgs:
        search.enableLabelAPI: "true"

      storage:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            storageClassName: longhorn
            resources:
              requests:
                storage: 10Gi

    vmagent:
      enabled: true
      spec:
        extraArgs:
          promscrape.maxScrapeSize: 50MiB
          promscrape.streamParse: "true"
          promscrape.dropOriginalLabels: "false"
        resources:
          limits:
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 500Mi
            
        serviceMonitorNamespaceSelector: {}
        podMonitorNamespaceSelector: {}
        serviceMonitorSelector: {}
        podMonitorSelector: {}

    prometheus-node-exporter:
      vmScrape:
        spec:
          endpoints:
            - port: metrics
              relabelConfigs:
                - source_labels:
                    - __meta__kubernetes_endpoint_node_name
                  target_label: node

    kubelet:
      vmScrape:
        spec:
          # drop high cardinality label and useless metrics for cadvisor and kubelet
          metricRelabelConfigs:
            # Drop less useful container CPU metrics.
            - sourceLabels: [__name__]
              action: drop
              regex: "container_cpu_(cfs_throttled_seconds_total|load_average_10s|system_seconds_total|user_seconds_total)"
            # Drop less useful / always zero container memory metrics.
            - sourceLabels: [__name__]
              action: drop
              regex: "container_memory_(failures_total|mapped_file|swap)"
            # Drop less useful container process metrics.
            - sourceLabels: [__name__]
              action: drop
              # regex: 'container_(file_descriptors|tasks_state|threads_max)'
              regex: "container_(tasks_state|threads_max)"
            # Drop less useful container filesystem metrics.
            - sourceLabels: [__name__]
              action: drop
              regex: "container_fs_(io_current|io_time_seconds_total|io_time_weighted_seconds_total|reads_merged_total|sector_reads_total|sector_writes_total|writes_merged_total)"
            # Drop less useful container blkio metrics.
            - sourceLabels: [__name__]
              action: drop
              regex: "container_blkio_device_usage_total"
            # Drop container spec metrics that overlap with kube-state-metrics.
            - sourceLabels: [__name__]
              action: drop
              regex: "container_spec.*"
            # Drop cgroup metrics with no pod.
            - sourceLabels: [id, pod]
              action: drop
              regex: ".+;"
            - action: drop
              sourceLabels: [__name__]
              regex: prober_probe_duration_seconds_bucket
            # Drop high-cardinality labels.
            - action: labeldrop
              regex: (uid|id|pod_uid|interface)
            - action: drop
              sourceLabels: [__name__]
              regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)

    kube-state-metrics:
      enabled: true # TODO: This doesn't support customResourceState. I'll deploy it separately.
      vmScrape:
        enabled: true
    grafana:
      enabled: false

    kubeEtcd:
      enabled: false

    additionalVictoriaMetricsMap:
      dockerhub-rules:
        create: true
        groups:
          - name: dockerhub
            rules:
              - alert: DockerhubRateLimitRisk
                annotations:
                  summary: Kubernetes cluster Dockerhub rate limit risk
                expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 100
                labels:
                  severity: critical
      oom-rules:
        create: true
        groups:
          - name: oom
            rules:
              - alert: OomKilled
                annotations:
                  summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
                expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
                labels:
                  severity: critical
